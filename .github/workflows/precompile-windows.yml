name: precompile-windows

on:
  workflow_dispatch:
    inputs:
      openssl_verison:
        description: 'OpenSSL Version'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  windows:
    runs-on: windows-2019
    env:
      PERL5_VERSION: "5.38.2"
    strategy:
      matrix:
        include:
          - pair:
              arch: "x86_64"
              vcvarsall: "x64"
              shared: shared
          - pair:
              arch: "aarch64"
              vcvarsall: "amd64_arm64"
              shared: static
          - pair:
              arch: "aarch64"
              vcvarsall: "amd64_arm64"
              shared: shared
          - pair:
              arch: "x86_64"
              vcvarsall: "x64"
              shared: static

    name: ${{ matrix.pair.arch }}-windows-msvc / ${{ matrix.pair.shared }}

    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.pair.vcvarsall }}

      - name: Download Precompiled Perl5
        shell: bash
        run: |
          curl -fSL https://github.com/cocoa-xu/perl-windows-build/releases/download/v${PERL5_VERSION}/perl-x86_64-windows-msvc.tar.gz -o perl-x86_64-windows-msvc.tar.gz
          echo "Perl 5 Version: $PERL5_VERSION"
          mkdir -p /c/perl
          tar -xzf perl-x86_64-windows-msvc.tar.gz -C /c/perl 2>/dev/null

      - name: Download OpenSSL Source Code
        shell: bash
        run: |
          export OPENSSL_VERSION=${{ github.event.inputs.openssl_verison }}
          export OPENSSL_VERSION=${OPENSSL_VERSION#v}
          echo "OpenSSL Version: $OPENSSL_VERSION"
          echo -n "$OPENSSL_VERSION" > /c/openssl_version.txt
          if [[ "${OPENSSL_VERSION}" == 3.* ]]; then
            curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          elif [[ "${OPENSSL_VERSION}" == 1.1.1* ]]; then
            curl -fSL "https://openssl.org/source/old/1.1.1/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          fi
          tar -xzf "openssl-${OPENSSL_VERSION}.tar.gz"
          rm -rf openssl-${OPENSSL_VERSION}.tar.gz

          if [ "${{ matrix.pair.arch }}" = "x86_64" ]; then
            curl -fSL "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip" -o "nasm-2.16.01-win64.zip"
            unzip -q "nasm-2.16.01-win64.zip" -d /c/nasm
            rm -rf nasm-2.16.01-win64.zip
          fi

          # Remove the link command to avoid conflict with the Windows built-in command
          mv /usr/bin/link /usr/bin/link_bak || true

      - name: Compile OpenSSL
        run: |
          $OPENSSL_VERSION = Get-Content -Path C:\openssl_version.txt
          cd "openssl-${OPENSSL_VERSION}"
          $env:Path = "C:\perl\bin;" + $env:Path

          if ( "${{ matrix.pair.shared }}" -eq "shared" ) {
            $lib_type = "shared"
          } else {
            $lib_type = "no-shared"
          }

          if ( "${{ matrix.pair.arch }}" -eq "aarch64" ) {
            cmd.exe /c "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsamd64_arm64.bat"
            perl Configure VC-WIN64-ARM no-tests $lib_type --prefix=C:\OpenSSL-Win64 --openssldir=C:\OpenSSL-Win64
          } else {
            $env:Path = "C:\nasm\nasm-2.16.01;" + $env:Path
            perl Configure VC-WIN64A no-tests $lib_type --prefix=C:\OpenSSL-Win64 --openssldir=C:\OpenSSL-Win64
          }

          nmake
          nmake install_sw
          nmake install_ssldirs

      - name: Create tarballs
        run: |
          tar -czf ".\openssl-${{ matrix.pair.shared }}-${{ matrix.pair.arch }}-windows-msvc.tar.gz" -C C:\OpenSSL-Win64 .

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.openssl_verison }}
          name: ${{ github.event.inputs.openssl_verison }}
          files: |
            openssl-*.tar.gz

  deploy-windows:
    runs-on: ubuntu-latest
    needs: windows
    steps:
      - name: deploy
        if: github.repository == 'cocoa-xu/openssl-build'
        env:
          DEPLOY_WINDOWS_HOOK_URL: ${{ secrets.DEPLOY_WINDOWS_HOOK_URL }}
        run: |
          curl -sS --no-progress-meter "${DEPLOY_WINDOWS_HOOK_URL}${{ github.event.inputs.openssl_verison }}"
