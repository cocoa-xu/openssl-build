name: precompile

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, i686, aarch64, ppc64le, s390x]

    name: manylinux2014_${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3

      - name: Pull docker image
        run: |
          sudo docker pull quay.io/pypa/manylinux2014_${{ matrix.arch }}:latest

      - name: Install binfmt
        run: |
          sudo apt install -y binfmt-support qemu-user-static

      - name: Precompile
        run: |
          cp .github/script-to-build-manylinux2014.sh ./
          cp .github/do-build-manylinux2014.sh ./

          bash ./script-to-build-manylinux2014.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}"

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            openssl-*.tar.gz

  alpine:
    runs-on: ubuntu-latest
    container: alpine:latest
    name: x86_64-linux-musl
    steps:
      - uses: actions/checkout@v3

      - name: Setup
        run: |
          apk add make curl gcc g++ perl ncurses-dev linux-headers

      - name: Download OpenSSL Source Code
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          echo "$OPENSSL_VERSION"
          curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xzf "openssl-${OPENSSL_VERSION}.tar.gz"

      - name: Compile OpenSSL
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          export ROOTDIR="$(pwd)"
          export PERFIX_DIR="/tmp/openssl-x86_64-linux-musl"
          mkdir -p "${PERFIX_DIR}"
          cd "openssl-${OPENSSL_VERSION}"
          mkdir build
          ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" linux-x86_64 no-tests
          make -j"$(nproc)"
          make -j"$(nproc)" install_sw
          make -j"$(nproc)" install_ssldirs
          mkdir -p "${ROOTDIR}/build"
          cd "${PERFIX_DIR}"
          tar -czf "${ROOTDIR}/build/openssl-x86_64-linux-musl.tar.gz" .

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz

  zig_build_musl:
    runs-on: ubuntu-latest
    env:
      ZIG_VERSION: "0.8.0"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair: 
              zig-arch: i386
              openssl-arch: linux-generic32
          - pair:
              zig-arch: aarch64
              openssl-arch: linux-aarch64
          - pair:
              zig-arch: riscv64
              openssl-arch: linux64-riscv64
    name: ${{ matrix.pair.zig-arch }}-linux-musl

    steps:
      - uses: actions/checkout@v3

      - name: Download OpenSSL Source Code
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          echo "$OPENSSL_VERSION"
          curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xzf "openssl-${OPENSSL_VERSION}.tar.gz"
      
      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev ca-certificates

      - name: Compile OpenSSL
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          export ROOTDIR="$(pwd)"
          export PERFIX_DIR="/tmp/openssl-${{ matrix.pair.zig-arch }}-linux-musl"
          mkdir -p "${PERFIX_DIR}"
          cd "openssl-${OPENSSL_VERSION}"
          mkdir build
          export CC="zig cc -target ${{ matrix.pair.zig-arch }}-linux-musl"
          export CXX="zig c++ -target ${{ matrix.pair.zig-arch }}-linux-musl"
          ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" ${{ matrix.pair.openssl-arch }} no-tests
          make -j"$(nproc)"
          make -j"$(nproc)" install_sw
          make -j"$(nproc)" install_ssldirs
          mkdir -p "${ROOTDIR}/build"
          cd "${PERFIX_DIR}"
          tar -czf "${ROOTDIR}/build/openssl-${{ matrix.pair.zig-arch }}-linux-musl.tar.gz" .

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz

  macos:
    runs-on: macos-12
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    name: ${{ matrix.arch }}-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - name: Download OpenSSL Source Code
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          echo "$OPENSSL_VERSION"
          curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xzf "openssl-${OPENSSL_VERSION}.tar.gz"

      - name: Compile OpenSSL
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          export ROOTDIR="$(pwd)"
          export PERFIX_DIR="/tmp/openssl-${{ matrix.arch }}-apple-darwin"
          mkdir -p "${PERFIX_DIR}"
          cd "openssl-${OPENSSL_VERSION}"
          mkdir build
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" darwin64-arm64 no-tests
          else
            ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" darwin64-x86_64 no-tests
          fi
          make -j"$(sysctl -n hw.ncpu)"
          make -j"$(sysctl -n hw.ncpu)" install_sw
          make -j"$(sysctl -n hw.ncpu)" install_ssldirs
          mkdir -p "${ROOTDIR}/build"
          cd "${PERFIX_DIR}"
          tar -czf "${ROOTDIR}/build/openssl-${{ matrix.arch }}-apple-darwin.tar.gz" .

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz
