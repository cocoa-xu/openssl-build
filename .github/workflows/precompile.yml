name: precompile

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, i686, aarch64, riscv64, ppc64le, s390x]

    name: ${{ matrix.arch }}-linux-gnu

    steps:
      - uses: actions/checkout@v3

      - name: Pull docker image
        run: |
          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            sudo docker pull --platform=linux/${{ matrix.arch }} riscv64/ubuntu:22.04
          else
            sudo docker pull quay.io/pypa/manylinux2014_${{ matrix.arch }}:latest
          fi

      - name: Install binfmt
        run: |
          sudo apt install -y binfmt-support qemu-user-static

      - name: Precompile
        run: |
          cp .github/script-to-build-gnu.sh ./
          cp .github/do-build.sh ./

          bash ./script-to-build-gnu.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}"

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            openssl-*.tar.gz

  linux-musl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, i386, aarch64, riscv64, ppc64le, s390x]

    name: ${{ matrix.arch }}-linux-musl

    steps:
      - uses: actions/checkout@v3

      - name: Pull docker image
        run: |
          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            sudo docker pull --platform=linux/${{ matrix.arch }} alpine:edge
          else
            sudo docker pull --platform=linux/${{ matrix.arch }} alpine:latest
          fi

      - name: Install binfmt
        run: |
          sudo apt install -y binfmt-support qemu-user-static

      - name: Precompile
        run: |
          cp .github/script-to-build-musl.sh ./
          cp .github/do-build.sh ./

          if [ "${{ matrix.arch }}" = "riscv64" ]; then
            bash ./script-to-build-musl.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}" "alpine:edge"
          else
            bash ./script-to-build-musl.sh "${GITHUB_REF##*/v}" "${{ matrix.arch }}" "alpine:latest"
          fi

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            openssl-*.tar.gz

  macos:
    runs-on: macos-12
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    name: ${{ matrix.arch }}-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - name: Download OpenSSL Source Code
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          echo "$OPENSSL_VERSION"
          curl -fSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "openssl-${OPENSSL_VERSION}.tar.gz"
          tar -xzf "openssl-${OPENSSL_VERSION}.tar.gz"

      - name: Compile OpenSSL
        run: |
          export OPENSSL_VERSION=${GITHUB_REF##*/v}
          export ROOTDIR="$(pwd)"
          export PERFIX_DIR="/tmp/openssl-${{ matrix.arch }}-apple-darwin"
          mkdir -p "${PERFIX_DIR}"
          cd "openssl-${OPENSSL_VERSION}"
          mkdir build
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" darwin64-arm64 no-tests
          else
            ./Configure --prefix="${PERFIX_DIR}" --openssldir="${PERFIX_DIR}" darwin64-x86_64 no-tests
          fi
          make -j"$(sysctl -n hw.ncpu)"
          make -j"$(sysctl -n hw.ncpu)" install_sw
          make -j"$(sysctl -n hw.ncpu)" install_ssldirs
          mkdir -p "${ROOTDIR}/build"
          cd "${PERFIX_DIR}"
          tar -czf "${ROOTDIR}/build/openssl-${{ matrix.arch }}-apple-darwin.tar.gz" .

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.tar.gz
